-- Movement API
-- By Spencer Haney

Movement = {}

Movement.saveLocation = "API/position"
shell.run("API/Error")

-- The X value, corresponding to east (X-) and west (X+)
Movement.x = 0
-- The Y value, corresponding to up and down
Movement.y = 0
-- The Z value, corresponding to north (Z-) and south (Z+)
Movement.z = 0
-- The heading value, corresponding to North, West, South, East
-- With 0, 1, 2, 3 accordingly
Movement.h = 0

Movement.load = function()
    print('Loading Movement position')
    if fs.exists(Movement.saveLocation) then
        file = fs.open(Movement.saveLocation, "r")
        Movement.x = tonumber(file.readLine())
        Movement.y = tonumber(file.readLine())
        Movement.z = tonumber(file.readLine())
        Movement.h = tonumber(file.readLine())
        file.close()
        return true
    else 
        return false
    end
end

-- Initialize the movement API to have the following x,y,z and heading values
-- Can be called with optional parameters, and the corresponding value will
-- default to 0
Movement.init = function(x,y,z,h)
    Movement.load()
    Movement.x = x or Movement.x or 0
    Movement.y = y or Movement.y or 0
    Movement.z = z or Movement.z or 0
    Movement.h = h or Movement.h or 0
    print('Initiated to: ', Movement.x, ', ', Movement.y, ', ', Movement.z, ', ', Movement.h)
end

Movement.save = function()
    file = fs.open(Movement.saveLocation, "w")
    file.writeLine(Movement.x)
    file.writeLine(Movement.y)
    file.writeLine(Movement.z)
    file.writeLine(Movement.h)
    file.close()
end

-- Turn the turtle left and modify the heading value accordingly
Movement.left = function()
    turtle.left()
    Movement.h = (Movement.h + 1) % 4
    Movement.save()
end

-- Turn the turtle right and modify the heading value accordingly
Movement.right = function()
    turtle.right()
    Movement.h = (Movement.h - 1) % 4
    Movement.save()
end

-- Turn the turtle around and modify the heading value accordingly
Movement.turnAround = function()
    Movement.left()
    Movement.left()
end

Movement.setCallback = function(func)
    Movement.checkFuel = func
end

-- Move the turtle forward one block digging if necessary and force is specified
Movement.forward = function(force)
    force = force or false
    if Movement.checkFuel then Movement.checkFuel() end
    result = turtle.forward()
    if force and not result then
        -- Check to see if the block is diggable
        digResult = turtle.dig()
        if not digResult then
            Error.post("Block not diggable")
            return false
        else
            -- If so, then keep digging til we're done  (in case of falling blocks)
            while turtle.detect() do
                turtle.dig()
            end
        end
        result = turtle.forward()
    end
    if result then
        if Movement.h == 0 then
            Movement.z = Movement.z - 1
        elseif Movement.h == 1 then
            Movement.x = Movement.x - 1
        elseif Movement.h == 2 then
            Movement.z = Movement.z + 1
        else
            Movement.x = Movement.x + 1
        end
        Movement.save()
    end
    return result
end

-- Move the turtle back one block, turning and digging if necessary and force is specified
Movement.back = function(force)
    force = force or false
    if Movement.checkFuel then Movement.checkFuel() end
    result = turtle.back()
    if force and not result then
        Movement.turnAround()
        -- Check to see if the block is diggable
        digResult = turtle.dig()
        if not digResult then
            Error.post("Block not diggable")
            return false
        else
            -- If so, then keep digging til we're done  (in case of falling blocks)
            while turtle.detect() do
                turtle.dig()
            end
        end
        result = turtle.back()
        Movement.turnAround()
    end
    if result then
        if Movement.h == 0 then
            Movement.z = Movement.z + 1
        elseif Movement.h == 1 then
            Movement.x = Movement.x + 1
        elseif Movement.h == 2 then
            Movement.z = Movement.z - 1
        else
            Movement.x = Movement.x - 1
        end
        Movement.save()
    end
    return result
end

-- Move the turtle up one block, digging if necessary and force is specified
Movement.up = function(force)
    force = force or false
    if Movement.checkFuel then Movement.checkFuel() end
    result = turtle.up()
    if force and not result then
        -- Check to see if the block is diggable
        digResult = turtle.digUp()
        if not digResult then
            Error.post("Block above not diggable")
            return false
        else
            -- If so, then keep digging til we're done  (in case of falling blocks)
            while turtle.detectUp() do
                turtle.digUp()
                os.sleep(.5) -- Give time for the block to fall
            end
        end
        result = turtle.up()
    end
    if result then
        Movement.y = Movement.y + 1
        Movement.save()
    end
    return result
end

-- Move the turtle down one block, digging if necessary and force is specified
Movement.down = function(force)
    force = force or false
    if Movement.checkFuel then Movement.checkFuel() end
    result = turtle.down()
    if force and not result then
        -- Check to see if the block is diggable
        digResult = turtle.digDown()
        if not digResult then
            Error.post("Block below not diggable")
            return false
        end
        result = turtle.down()
    end
    if result then
        Movement.y = Movement.y - 1
        Movement.save()
    end
    return result
end

-- Turns to the specified heading
Movement.turnTo = function(heading)
    o = (heading - Movement.h) % 4
    if 
       o == 1 then Movement.left() elseif 
       o == 2 then Movement.turnAround() elseif 
       o == 3 then Movement.right() 
    end
end

-- Move towards the x provided, digging if necessary and force is specified
Movement.gotoX = function(x, force)
    force = force or false
    if Movement.x > x then
        Movement.turnTo(1)
        while Movement.x > x do
            Movement.forward(force)
        end
    end
    if Movement.x < x then
        Movement.turnTo(3)
        while Movement.x < x do
            Movement.forward(force)
        end
    end
end

-- Move toward the y provided, digging if necessary and force is specified
Movement.gotoY = function(y, force)
    force = force or false
    if Movement.y > y then
        while Movement.y > y do
            Movement.down(force)
        end
    end
    if Movement.y < y then
        while Movement.y < y do
            Movement.up(force)
        end
    end
end

-- Move toward the z provided, digging if necessary and force is specified
Movement.gotoZ = function(z, force)
    force = force or false
    if Movement.z > z then
        Movement.turnTo(0)
        while Movement.z > z do
            Movement.forward(force)
        end
    end
    if Movement.z < z then
        Movement.turnTo(2)
        while Movement.z < z do
            Movement.forward(force)
        end
    end
end

-- Calculate the distance among all axes to the destination point
Movement.snakeDistance = function(x, y, z)
    dx = math.abs(Movement.x - x)
    dy = math.abs(Movement.y - y)
    dz = math.abs(Movement.z - z)
    return dx + dy + dz
end