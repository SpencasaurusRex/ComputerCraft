cfgLocation = "Quarry.cfg"
ignoreLocation = "IgnoreBlocks"

local function digUpDown()
    a,b = turtle.inspectUp()
    if a and ignoreBlocks[b["name"]] == nil then
        turtle.digUp()
    end
    a,b = turtle.inspectDown()
    if a and ignoreBlocks[b["name"]] == nil then
        turtle.digDown()
    end
end

local function goHome()
    lastPosX = Movement.x
    lastPosY = Movement.y
    lastPosZ = Movement.z
    lastHeading = Movement.h
    Movement.gotoX(0)
    Movement.gotoZ(0)
    Movement.gotoY(0)
end

local function goBack()
    Movement.gotoY(lastPosY)
    Movement.gotoZ(lastPosZ)
    Movement.gotoX(lastPosX)
    Movement.turnTo(lastHeading)
end

local function attemptRefuel()
    for i = 1,16 do
        if turtle.getItemCount(i) > 0 then
            turtle.select(i)
            if turtle.refuel(0) then
                turtle.refuel(turtle.getItemCount())
            end
        end
    end
end

local function placeEnderChest()
    while turtle.detect() do
        turtle.dig()
    end
    for i =1,16 do
        if turtle.getItemCount() > 0 then
            info = turtle.getItemDetail(i)
            if info["name"] == "EnderStorage:enderChest" then
                turtle.select(i)
                turtle.place()
            end
        end
    end
end

local function dropAll()
    if turtle.detect() then
        for i=1,16 do
            if turtle.getItemCount(i) > 0 then
                turtle.select(i)
                while not turtle.drop() do
                    if cfg.extraChests then
                        Movement.up(true)
                        while not turtle.detect() do
                            Error.post("Missing drop chest2", true)
                        end
                    elseif cfg.enderChest then
                        -- Wait for extraction
                        sleep(10)
                    else
                        Error.post("Drop chest full", true)
                    end
                end
            end
        end
    end
end

local function emptyInventoryIntoChest()
    if cfg.enderChest then
        placeEnderChest()
    else
        goHome()
        Movement.turnTo(1)
    end
    -- Check for initial chest
    while not turtle.detect() do
        Error.post("Missing drop chest1", true)
    end
    dropAll()
    if not cfg.enderChest then
        goBack()
    end    
end

local function getFuel()
    goHome()
    -- While were here, store stuff
    if not cfg.enderChest then
        Movement.turnTo(1)
        emptyInventoryIntoChest()
    end
    Movement.turnTo(2)
    while turtle.getFuelLevel() < getMinFuel() do
        while not turtle.suck() do
            Error.post("Not enough fuel", true)
        end
        attemptRefuel()
    end
    goBack()
end

local function slotsOfInventoryUsed()
    sum = 0
    for i = 1,16 do
        if turtle.getItemCount(i) > 0 then
            sum = sum + 1
        end
    end
    return sum
end

local function getMinFuel()
    return width ^ 2 + width + 100
end

local function checkStuff()
    if slotsOfInventoryUsed() == 16 then
        if cfg.drop then
            for i = 1,16 do
                if turtle.getItemCount(i) > 0 then
                    turtle.select(i)
                    a = turtle.getItemDetail()
                    if ignoreBlocks[a["name"]] then
                        turtle.drop()
                    end
                end
            end
            turtle.select(1)
        else
            emptyInventoryIntoChest()
        end
    end
    if turtle.getFuelLevel() < getMinFuel() then
        attemptRefuel()
        if turtle.getFuelLevel() < getMinFuel() then
            getFuel()
        end
    end
end

local function dig()
    digUpDown()
    Movement.forward(true)
    if cfg.reboot then save() end
    checkStuff()
end

local function doColumn()
    while true do
        dig()
        if Movement.z == -width + 1 or Movement.z == 0 then 
            return 
        end
    end
end

local function clearLevel()
    digUpDown()
    while true do
        up = ((Movement.x % 2) == 0)
        doColumn()
        if Movement.x == width - 1 then
            digUpDown()
            Movement.gotoX(0)
            Movement.gotoZ(0)
            Movement.turnTo(0)
            return
        end
        Movement.turnTo(3)
        dig()
        if up then 
            Movement.turnTo(2)
        else
            Movement.turnTo(0)
        end
        dig()
    end
end

local function editStartup()
    local f = fs.open("startup", "w")
    f.writeLine("shell.run(\"Quarry2\", \"-r\")")
    f.close()
end

local function loadConfig()
    if not fs.exists(cfgLocation) then
        print("Loading config")
        shell.run("SetupQuarry")
    else
        print("Loading config")
        shell.run("SetupQuarry", "-l")
    end
end

local function loadIgnoreBlocks()
    ignoreBlocks = {}
    if not fs.exists(ignoreLocation) then
        print("There is no IgnoreBlocks file, please run the teach program first")
        return
    end
    file = fs.open(ignoreLocation,"r")
    while true do
        text = file.readLine()
        if text == nil then break end
        ignoreBlocks[text] = true
    end
end

local function load()
    shell.run("API/Movement")
    loadConfig()
    loadIgnoreBlocks()
    if cfg.reboot then
        editStartup()
    end

    -- Select the first slot so that items dug will be put there
    turtle.select(1)
end

local function go()
    while Movement.y < 0 do
        clearLevel()
        for i=1,3 do
            Movement.up(true)
            checkStuff()
        end
    end
    emptyInventoryIntoChest()
    if cfg.reboot then
        fs.delete("startup")
        fs.delete(saveLocation)
    end
end

local function start()
    -- Head down to the bottom of the map
    while Movement.down(true) do checkStuff() end
    Movement.up(true)
    go()
end

local function reboot()
    Movement.init()
    local f = fs.open(saveLocation, "r")
    lx = tonumber(f.readLine())
    ly = tonumber(f.readLine())
    lz = tonumber(f.readLine())
    width = tonumber(f.readLine())
    f.close()

    checkStuff()
    Movement.gotoY(ly)
    Movement.gotoZ(lz)
    Movement.gotoX(lx)
    go()
end

local args = {...}
load()
if #args == 1 and args[1] == "-r" then
    reboot()
    return
elseif #args == 1 then
    width = tonumber(args[1])
elseif #args == 0 then
    width = 8
else
    printUsage()
    return
end
start()